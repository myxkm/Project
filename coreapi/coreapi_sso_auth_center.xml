<?xml version="1.0"?>
<doc>
    <assembly>
        <name>coreweb_sso_auth_center</name>
    </assembly>
    <members>
        <member name="M:coreapi.Comman.EmailHelpers.SendMailAsync(System.String,System.String,System.String)">
            <summary>
            异步发送邮件
            </summary>
            <param name="emails">email地址</param>
            <param name="subject">邮件标题</param>
            <param name="content">邮件内容</param>
        </member>
        <member name="M:coreapi.Comman.EmailHelpers.SendEmail(System.String,System.String,System.String)">
            <summary>
            邮件发送方法
            </summary>
            <param name="emails">email地址</param>
            <param name="subject">邮件标题</param>
            <param name="content">邮件内容</param>
            <returns></returns>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.SetEncoding(System.Text.Encoding)">
            <summary>
            设置邮件编码类型
            </summary>
            <param name="contentEncoding"></param>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.SetIsHtml(System.Boolean)">
             <summary>
            设置邮件正文是否为 Html 格式
             </summary>
             <param name="isHtml"></param>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.SetCC(System.String[])">
            <summary>
            抄送
            </summary>
            <param name="cc"></param>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.SetBC(System.String[])">
            <summary>
            暗送
            </summary>
            <param name="bc"></param>
            <param name="cc"></param>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.SetIsSSL(System.Boolean)">
            <summary>
            是否ssl加密
            </summary>
            <param name="isSSL"></param>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="host"></param>
            <param name="username">邮件账号</param>
            <param name="password">密码</param>
            <param name="Port">端口</param>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.#ctor(Microsoft.Extensions.Options.IOptions{coreapi.MongoModel.Settings.AppSettings})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.Send(System.String,System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="sender">发件人显示名称</param>
            <param name="to">收件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="file">附件地址数组</param>
            <returns>bool 是否成功 </returns>
        </member>
        <member name="M:coreapi.Comman.MailSmtp.Send(System.String[],System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人邮件地址</param>
            <param name="sender">发件人显示名称</param>
            <param name="to">收件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="file">附件地址数组</param>
            <returns>bool 是否成功 </returns>
        </member>
        <member name="P:coreapi.Comman.MailSmtp.Result">
            <summary>
            获取发送结果，成功则为空
            </summary>
        </member>
        <member name="M:coreapi.Controllers.LogController.Trace(coreapi.MongoModel.TableName.LogEventData)">
            <summary>
            <![CDATA[trace]]>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:coreapi.Controllers.LogController.Error(coreapi.MongoModel.TableName.LogEventData)">
            <summary>
            <![CDATA[error]]>
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:coreapi.Controllers.OAuthController">
            <summary>
            授权中心
            </summary>
        </member>
        <member name="M:coreapi.Controllers.OAuthController.Token(System.String,System.String)">
            <summary>
            <![CDATA[获取访问令牌,签发中心，签发令牌]]>
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:coreapi.Controllers.RedPacketController.Get(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            <![CDATA[红包算法1]]>
            </summary>
            <param name="price">发的金额</param>
            <param name="priceMin">每人枪的最小额</param>
            <param name="count">红包个数</param>
            <returns>获取红包池子</returns>
        </member>
        <member name="M:coreapi.Controllers.RedPacketController.Get1(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            <![CDATA[红包算法2 优化后 ]]>
            </summary>
            <param name="price">发的金额</param>
            <param name="priceMin">每人枪的最小额</param>
            <param name="count">红包个数</param>
            <returns>获取红包池子</returns>               
        </member>
        <member name="M:coreapi.Core.LocationInfo.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:coreapi.Core.LocationInfo" />
            class based on the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:coreapi.Core.LocationInfo.#ctor(System.Type,System.Diagnostics.StackTrace)">
            <summary>
            自定义获取位置信息，异步线程内获取期望值
            </summary>
            <param name="callerStackBoundaryDeclaringType"></param>
            <param name="st"></param>
        </member>
        <member name="M:coreapi.Core.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="className">The fully qualified class name.</param>
            <param name="methodName">The method name.</param>
            <param name="fileName">The file name.</param>
            <param name="lineNumber">The line number of the method within the file.</param>
            <remarks>
            <para>
            Initializes a new instance of the <see cref="T:coreapi.Core.LocationInfo" />
            class with the specified data.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.LocationInfo.ClassName">
            <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
            <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
            <remarks>
            <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.LocationInfo.FileName">
            <summary>
            Gets the file name of the caller.
            </summary>
            <value>
            The file name of the caller.
            </value>
            <remarks>
            <para>
            Gets the file name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.LocationInfo.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
            <value>
            The line number of the caller.
            </value>
            <remarks>
            <para>
            Gets the line number of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.LocationInfo.MethodName">
            <summary>
            Gets the method name of the caller.
            </summary>
            <value>
            The method name of the caller.
            </value>
            <remarks>
            <para>
            Gets the method name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.LocationInfo.FullInfo">
            <summary>
            Gets all available caller information
            </summary>
            <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </value>
            <remarks>
            <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.LocationInfo.StackFrames">
            <summary>
            Gets the stack frames from the stack trace of the caller making the log request
            </summary>
        </member>
        <member name="F:coreapi.Core.LocationInfo.declaringType">
            <summary>
            The fully qualified type of the LocationInfo class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:coreapi.Core.LocationInfo.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:coreapi.Core.LogEventDataAsync">
            <summary>
            日志数据，传入异步执行方法的数据
            主要为提前获取CallerStackBoundaryDeclaringType和CallerStackTrace，避免Core（log4net源码）下追踪信息在异步线程内与期望不一致
            </summary>
        </member>
        <member name="P:coreapi.Core.LogEventDataAsync.Level">
            <summary>
            错误级别
            </summary>
        </member>
        <member name="P:coreapi.Core.LogEventDataAsync.LogSource">
            <summary>
            日志来源
            </summary>
        </member>
        <member name="P:coreapi.Core.LogEventDataAsync.CallerStackBoundaryDeclaringType">
            <summary>
            调用日志方法实例类型
            </summary>
        </member>
        <member name="P:coreapi.Core.LogEventDataAsync.CallerStackTrace">
            <summary>
            StackTrace
            </summary>
        </member>
        <member name="P:coreapi.Core.LogEventDataAsync.Emails">
            <summary>
            不为空则发送邮件，多个接收人用英文逗号隔开
            </summary>
        </member>
        <member name="M:coreapi.Core.MethodItem.#ctor">
            <summary>
            constructs a method item for an unknown method.
            </summary>
        </member>
        <member name="M:coreapi.Core.MethodItem.#ctor(System.String)">
            <summary>
            constructs a method item from the name of the method.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:coreapi.Core.MethodItem.#ctor(System.String,System.String[])">
            <summary>
            constructs a method item from the name of the method and its parameters.
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:coreapi.Core.MethodItem.#ctor(System.Reflection.MethodBase)">
            <summary>
            constructs a method item from a method base by determining the method name and its parameters.
            </summary>
            <param name="methodBase"></param>
        </member>
        <member name="P:coreapi.Core.MethodItem.Name">
            <summary>
            Gets the method name of the caller making the logging 
            request.
            </summary>
            <value>
            The method name of the caller making the logging 
            request.
            </value>
            <remarks>
            <para>
            Gets the method name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.MethodItem.Parameters">
            <summary>
            Gets the method parameters of the caller making
            the logging request.
            </summary>
            <value>
            The method parameters of the caller making
            the logging request
            </value>
            <remarks>
            <para>
            Gets the method parameters of the caller making
            the logging request.
            </para>
            </remarks>
        </member>
        <member name="F:coreapi.Core.MethodItem.declaringType">
            <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:coreapi.Core.MethodItem.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.BuildQuery(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            组装普通文本请求参数。
            </summary>
            <param name="parameters">Key-Value形式请求参数字典</param>
            <returns>URL编码后的请求数据</returns>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.DoPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行HTTP POST请求。
            对参数值执行UrlEncode
            </summary>
            <param name="url">请求地址</param>
            <param name="parameters">请求参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.DoPost(System.String,System.String)">
            <summary>
            执行HTTP POST请求。
            该方法在执行post时不对请求数据进行任何编码（UrlEncode）
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求数据</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.DoPost``1(System.String,``0)">
            <summary>
            post数据 T messagepack序列化格式 减少传输数据大小
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="model"></param>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.DoPost``1(System.String,``0,System.String,System.String)">
            <summary>
            Authorization 认证
            post数据 T messagepack序列化格式 减少传输数据大小
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="model"></param>
            <param name="username">账户</param>
            <param name="password">密码</param>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.DoPostJson(System.String,System.String)">
            <summary>
            执行HTTP POST请求。
            该方法在执行post时不对请求数据进行任何编码（UrlEncode）
            </summary>
            <param name="url">请求地址</param>
            <param name="data">请求数据</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.DoGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行HTTP GET请求。
            </summary>
            <param name="url">请求地址</param>
            <param name="parameters">请求参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:coreapi.Core.RequestHelpers.GetResponseAsString(System.Net.HttpWebResponse,System.Text.Encoding)">
            <summary>
            把响应流转换为文本。
            </summary>
            <param name="rsp">响应流对象</param>
            <param name="encoding">编码方式</param>
            <returns>响应文本</returns>
        </member>
        <member name="M:coreapi.Core.StackFrameItem.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            returns a stack frame item from a stack frame. This 
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="P:coreapi.Core.StackFrameItem.ClassName">
            <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
            <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
            <remarks>
            <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.StackFrameItem.FileName">
            <summary>
            Gets the file name of the caller.
            </summary>
            <value>
            The file name of the caller.
            </value>
            <remarks>
            <para>
            Gets the file name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.StackFrameItem.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
            <value>
            The line number of the caller.
            </value>
            <remarks>
            <para>
            Gets the line number of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.StackFrameItem.Method">
            <summary>
            Gets the method name of the caller.
            </summary>
            <value>
            The method name of the caller.
            </value>
            <remarks>
            <para>
            Gets the method name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:coreapi.Core.StackFrameItem.FullInfo">
            <summary>
            Gets all available caller information
            </summary>
            <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </value>
            <remarks>
            <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c>
            </para>
            </remarks>
        </member>
        <member name="F:coreapi.Core.StackFrameItem.declaringType">
            <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:coreapi.Core.StackFrameItem.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:coreapi.DesignMode.SingletonPattem">
            <summary>
            设计模式之 单例模式  利用静态变量
            </summary>
        </member>
        <member name="M:coreapi.DesignMode.SingletonPattem.GetInstance">
            <summary>
            利用静态变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:coreapi.DesignMode.SingletonPattem0">
            <summary>
            设计模式之 单例模式 
            </summary>
        </member>
        <member name="M:coreapi.DesignMode.SingletonPattem0.GetInstance">
            <summary>
            利用静态构造函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:coreapi.DesignMode.SingletonPattem1">
            <summary>
            设计模式之 单例模式 
            </summary>
        </member>
        <member name="M:coreapi.DesignMode.SingletonPattem1.GetInstance">
            <summary>
            线程安全 双if_lock
            </summary>
            <returns></returns>
        </member>
        <member name="T:coreapi.Exceptions.ExceptionMiddlewareExtensions">
            <summary>
            全局异常处理中间件
            </summary>
        </member>
        <member name="T:coreapi.Exceptions.LoggerServiceExtension">
            <summary>
            日志服务注入扩展类
            </summary>
        </member>
        <member name="M:coreapi.Exceptions.LoggerServiceExtension.AddLoggerService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            注入日志服务
            </summary>
            <param name="service">IServiceCollection</param>
            <param name="logSource">日志来源，默认日志来源为调用方法所在类：namespace.classname</param>
            <returns></returns>
        </member>
        <member name="F:coreapi.LogApiHandler.Logger._logWriter">
            <summary>
            日志写入实例
            </summary>
        </member>
        <member name="F:coreapi.LogApiHandler.Logger._logSource">
            <summary>
            日志来源
            默认为调用方法所在类
            </summary>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.#ctor(System.String)">
            <summary>
            私有构造函数
            </summary>
            <param name="logSource">日志来源</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.GetLogger(System.String)">
            <summary>
            获取Logger实例
            默认日志来源为调用方法所在类：namespace.classname
            </summary>
            <param name="logSource">日志来源</param>
            <returns></returns>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Trace(System.String,System.String)">
            <summary>
            Trace
            </summary>
            <param name="message">日志内容</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Trace(System.Exception,System.String)">
            <summary>
            Trace
            </summary>
            <param name="ex">异常信息</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志内容</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="ex">异常信息</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志内容</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Info(System.Exception,System.String)">
            <summary>
            Info
            </summary>
            <param name="ex">异常信息</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志内容</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="ex">异常信息</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志内容</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="ex">异常信息</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志内容</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="ex">异常信息</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="M:coreapi.LogApiHandler.Logger.WriterToTargets(System.String,coreapi.LogApiHandler.LogLevel,System.String)">
            <summary>
            写日志
            </summary>
            <param name="message">日志信息</param>
            <param name="level">级别</param>
            <param name="emails">是否发送邮件,不为空则发送邮件，多个接收人用英文分号;隔开</param>
        </member>
        <member name="F:coreapi.LogApiHandler.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>        
        </member>
        <member name="F:coreapi.LogApiHandler.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>        
        </member>
        <member name="F:coreapi.LogApiHandler.LogLevel.Info">
            <summary>
            Info log level.
            </summary>        
        </member>
        <member name="F:coreapi.LogApiHandler.LogLevel.Warn">
            <summary>
            Warn log level.
            </summary>        
        </member>
        <member name="F:coreapi.LogApiHandler.LogLevel.Error">
            <summary>
            Error log level.
            </summary>        
        </member>
        <member name="F:coreapi.LogApiHandler.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>        
        </member>
        <member name="M:coreapi.LogApiHandler.LogLevel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:coreapi.LogApiHandler.LogLevel"/>.
            </summary>
            <param name="name">The log level name.</param>
            <param name="ordinal">The log level ordinal number.</param>
        </member>
        <member name="P:coreapi.LogApiHandler.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="P:coreapi.LogApiHandler.LogLevel.Ordinal">
            <summary>
            Gets the ordinal of the log level.
            </summary>
        </member>
        <member name="P:coreapi.LogApiHandler.LogLevel.LogApi">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="M:coreapi.LogApiHandler.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel"/> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="levelName">The textual representation of the log level.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:coreapi.LogApiHandler.LogWriter.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="M:coreapi.LogApiHandler.LogWriter.GetLogWriter">
            <summary>
            获取LogWriter实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:coreapi.LogApiHandler.LogWriter.GetLoggingEventData(coreapi.Core.LogEventDataAsync)">
            <summary>
            获取日志数据
            </summary>
            <param name="logEventDataAsync"></param>
            <returns></returns>
        </member>
        <member name="P:coreapi.Models.RestfulData.Code">
            <summary>
            <![CDATA[错误码]]>
            </summary>
        </member>
        <member name="P:coreapi.Models.RestfulData.Message">
             <summary>
            <![CDATA[消息]]>
             </summary>
        </member>
        <member name="P:coreapi.Models.RestfulData.Url">
            <summary>
            <![CDATA[相关的链接帮助地址]]>
            </summary>
        </member>
        <member name="T:coreapi.Models.RestfulData`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="P:coreapi.Models.RestfulData`1.Data">
            <summary>
            <![CDATA[数据]]>
            </summary>
        </member>
        <member name="T:coreapi.Models.RestfulArray`1">
            <summary>
            <![CDATA[返回数组]]>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:coreapi.Models.TokenObj.Token">
            <summary>
            token内容
            </summary>
        </member>
        <member name="P:coreapi.Models.TokenObj.Expires">
            <summary>
            //过期时间
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.ResponseModel`1.ResultCode">
            <summary>
            返回码
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.ResponseModel`1.Message">
            <summary>
            结果说明
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.ResponseModel`1.Data">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="T:coreapi.MongoModel.Settings.DBSettings">
            <summary>
            数据库配置信息
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.Settings.DBSettings.MongoConn">
            <summary>
            Mongo 的链接地址
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.Settings.DBSettings.MongoDBName">
            <summary>
            数据库名称database
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.Settings.DBSettings.TableName_Logs">
            <summary>
            数据库 下面的表名字collection
            </summary>
        </member>
        <member name="T:coreapi.MongoModel.TableName.LogEventData">
            <summary>
            日志数据
            post到日志接口的数据
            </summary>
            
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.CurrentUniqueId">
            <summary>
            自定义id
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.Date">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.Level">
            <summary>
            错误级别
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.LogSource">
            <summary>
            日志来源
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.Message">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.MethodName">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.FullInfo">
            <summary>
            完整信息
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.LineNumber">
            <summary>
            行号
            </summary>        
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.FileName">
            <summary>
            文件名
            </summary>        
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.IP">
            <summary>
            ip
            </summary>
        </member>
        <member name="P:coreapi.MongoModel.TableName.LogEventData.Emails">
            <summary>
            不为空则发送邮件，多个接收人用英文分号 ; 隔开
            </summary>
        </member>
    </members>
</doc>
