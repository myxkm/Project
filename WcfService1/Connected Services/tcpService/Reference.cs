//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfService1.tcpService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/WCF.Model")]
    [System.SerializableAttribute()]
    public partial class Company : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateTime {
            get {
                return this.CreateTimeField;
            }
            set {
                if ((this.CreateTimeField.Equals(value) != true)) {
                    this.CreateTimeField = value;
                    this.RaisePropertyChanged("CreateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="tcpService.ICompanyService")]
    public interface ICompanyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetAllList", ReplyAction="http://tempuri.org/ICompanyService/GetAllListResponse")]
        WcfService1.tcpService.Company[] GetAllList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetAllList", ReplyAction="http://tempuri.org/ICompanyService/GetAllListResponse")]
        System.Threading.Tasks.Task<WcfService1.tcpService.Company[]> GetAllListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetList", ReplyAction="http://tempuri.org/ICompanyService/GetListResponse")]
        WcfService1.tcpService.Company[] GetList(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/GetList", ReplyAction="http://tempuri.org/ICompanyService/GetListResponse")]
        System.Threading.Tasks.Task<WcfService1.tcpService.Company[]> GetListAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/Add", ReplyAction="http://tempuri.org/ICompanyService/AddResponse")]
        WcfService1.tcpService.Company Add(WcfService1.tcpService.Company model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/Add", ReplyAction="http://tempuri.org/ICompanyService/AddResponse")]
        System.Threading.Tasks.Task<WcfService1.tcpService.Company> AddAsync(WcfService1.tcpService.Company model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/Delete", ReplyAction="http://tempuri.org/ICompanyService/DeleteResponse")]
        bool Delete(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompanyService/Delete", ReplyAction="http://tempuri.org/ICompanyService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(long Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompanyServiceChannel : WcfService1.tcpService.ICompanyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompanyServiceClient : System.ServiceModel.ClientBase<WcfService1.tcpService.ICompanyService>, WcfService1.tcpService.ICompanyService {
        
        public CompanyServiceClient() {
        }
        
        public CompanyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompanyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompanyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompanyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfService1.tcpService.Company[] GetAllList() {
            return base.Channel.GetAllList();
        }
        
        public System.Threading.Tasks.Task<WcfService1.tcpService.Company[]> GetAllListAsync() {
            return base.Channel.GetAllListAsync();
        }
        
        public WcfService1.tcpService.Company[] GetList(string Name) {
            return base.Channel.GetList(Name);
        }
        
        public System.Threading.Tasks.Task<WcfService1.tcpService.Company[]> GetListAsync(string Name) {
            return base.Channel.GetListAsync(Name);
        }
        
        public WcfService1.tcpService.Company Add(WcfService1.tcpService.Company model) {
            return base.Channel.Add(model);
        }
        
        public System.Threading.Tasks.Task<WcfService1.tcpService.Company> AddAsync(WcfService1.tcpService.Company model) {
            return base.Channel.AddAsync(model);
        }
        
        public bool Delete(long Id) {
            return base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(long Id) {
            return base.Channel.DeleteAsync(Id);
        }
    }
}
