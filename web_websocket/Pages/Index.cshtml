@page
@model IndexModel
@{
    ViewData["Title"] = "Web Socket";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <input class="form-control" />
    <a class="btn-block" style="">open</a>
    <a class="btn-primary" style="">send</a>
    <a class="btn-danger">close</a>
</div>
@section scripts {
    <script>
        var wsUrl = "wss://echo.websocket.org";
        if (false) {
            var lockReconnect = false;//避免重复连接
            var ws;
            function createWebSocket() {
                try {
                    ws = new WebSocket(wsUrl);
                    websocketInit();
                } catch (e) {
                    console.log('catch', e);
                    websocketReconnect(wsUrl);
                }
            }
            createWebSocket();			// 创建websocket

            function websocketInit() {
                // 建立 web socket 连接成功触发事件
                ws.onopen = function (evt) {
                    onOpen(evt);
                };
                // 断开 web socket 连接成功触发事件
                ws.onclose = function (evt) {
                    websocketReconnect(wsUrl);
                    onClose(evt);
                };
                // 接收服务端数据时触发事件
                ws.onmessage = function (evt) {
                    onMessage(evt);
                };
                // 通信发生错误时触发
                ws.onerror = function (evt) {
                    websocketReconnect(wsUrl);
                    onError(evt);
                };
            };

            function onOpen(evt) {
                console.log("建立链接");
                var sendData = { test: 'test' };        // 正常的请求数据
                sendData = JSON.stringify(sendData);
                ws.send(sendData);
                //心跳检测重置
                heartCheck.start();
            }

            function onClose(evt) {
                console.log("连接已关闭...");
            }

            function onMessage(evt) {
                console.log('接收消息: ' + evt.data);
                var data = JSON.parse(evt.data);
                if (data.test && data.test == 'hello') {		// 对后端传过来的数据正常处理
                    // 所需的正常操作
                }
                //拿到任何消息都说明当前连接是正常的
                heartCheck.start();
            }

            function websocketReconnect(url) {
                if (lockReconnect) {       // 是否已经执行重连
                    return;
                };
                lockReconnect = true;
                //没连接上会一直重连，设置延迟避免请求过多
                tt && clearTimeout(tt);
                var tt = setTimeout(function () {
                    createWebSocket(url);
                    lockReconnect = false;
                }, 5000);
            }

            //心跳检测
            var heartCheck = {
                timeout: 30000,
                timeoutObj: null,
                serverTimeoutObj: null,
                start: function () {
                    console.log('start');
                    var self = this;
                    this.timeoutObj && clearTimeout(this.timeoutObj);
                    this.serverTimeoutObj && clearTimeout(this.serverTimeoutObj);
                    this.timeoutObj = setTimeout(function () {
                        //发送测试信息，后端收到后，返回一个消息，
                        ws.send("1");
                        self.serverTimeoutObj = setTimeout(function () {
                            ws.close();
                        }, self.timeout);
                    }, this.timeout)
                }
            }

            function onError(evt) {
                console.log('通信错误：' + evt.data);
            }
        }


        if (true) {
            var ws ;
            $('.btn-block').click(function () {
                if (ws.readyState == WebSocket.OPEN) {
                    alert("当前处于打开状态，无需重复！")
                    return;
                }
                createws();
            })
            createws();
            function createws() {
                ws = new WebSocket(wsUrl);
                ws.onopen = (e) => {
                    console.log("Connection open ...");

                    $('.btn-primary').click(function () {
                        if (ws.readyState != WebSocket.OPEN) {
                            alert("当前处于关闭状态，无法发送！")
                            return;
                        }
                        ws.send($('.form-control').val()) // 发送消息
                    })

                    ws.onmessage = (e) => {
                        console.log("onmessage  ...", e);
                        $('body').append('<p> onmessage ' + e.data + '</p>')
                    }
                    ws.onerror = (e) => {
                        console.log("onerror ...", e);
                        $('body').append('<p> onerror  ' + e.data + '</p>')
                    }
                    ws.onclose = (e) => {
                        console.log("onclose  ...", e);
                        $('body').append('<p> onclose success</p>')
                    }
                    $('.btn-danger').click(function () {
                        console.log("关闭  ... ws", ws);
                        console.log("关闭  ... WebSocket.close", WebSocket.CLOSED);
                        if (ws.readyState == WebSocket.CLOSED) {
                            alert('处于关闭状态,无法关闭')
                        }
                        ws.close()
                    })
                }
            }
        }
    </script>
}